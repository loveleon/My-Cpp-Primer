11.1 vector是顺序存储，基于数组实现。map基于数组实现的，索引不是位置，而是关键字。
11.2 list双链表存储数据结构；vector基于数组顺序存储,动态数组;deque双向队列;map存储键值对;set存储关键字,可以快速定位元素是否存在,排序的，唯一的.
11.5 map是键值对关联容器；set是只有关键字的关联容器；
11.6 list 1）线性查找时间；2）插入，删除，移动是常数时间；3）元素可能有序；4）元素可以排序；5）元素可以重复；
     set  1）对数查找时间；2）插入，删除，移动对数时间；  3）元素无序；    4）元素排序从低到高；5）元素唯一；
11.8 set 存储数据唯一；
        元素有序；
        插入 删除元素时间对数;vector按O(length);
11.12 make_pair 方式最直观。
11.15 map<int,vector<int>> mapped_type 是pair<int,vector<int>>类型；key_type是int类型；value_type是pair<int,vector<int>>类型。
11.16 map<typename T1,typename T2>::iterator it;it->second= value;
11.17   1)合法。
	2）不合法。(因为multiset不支持push_back)
	3）合法  4）合法。
11.18 map<const string,size_t>::const_iterator;
11.19 using COMPARE_TYPE = bool (*)(const Sales_data &,const Sales_data &);
multiset<string, COMPARE_TYPE> bookstore(compareIsbn);
multiset<string,COMPARE_TYPE>::iterator c_it = bookstore.begin();
11.21 word_count.insert({word,0})插入一个map元素，
    .first 获取返回的pair值的关键字(是一个迭代器类型,指向新插入元素)
    ->second 获取新插入关键字的值，
    ++ 将新插入关键字对应值加1.
11.22 map<string,vector<int>> insert版本：Insert(pair<string,vector<int>>) 返回值：pair<map<string,vector<int>>::iterator,bool>
